PCs <- data.frame(scores(ord$vectors))
new.dat <- cbind(PCs, sample_data(VOC)$microbe, sample_data(VOC)$hour, sample_data(VOC)$rep) # make a new matrix
names(new.dat)[38:40] <- c("Microbe", "Hour", "Rep")
library(gdata)
new.dat$Microbe <- reorder.factor(new.dat$Microbe, new.order = c("FF", "PA"))
new.dat$Hour <- reorder.factor(new.dat$Hour, new.order = c("2","24", "48"))
###
ggplot(new.dat, aes(x=Axis.1, y= Axis.2)) +
geom_point(aes(color = Microbe, shape = Hour), position ="jitter") +
facet_grid(~Hour)+
theme_bw()+
xlab("PCoA1 (54.6% Var. Expl.)")+
ylab("PCoA2 (21.5% Var. Expl.)")
sample_data(VOC)$fday <- factor(sample_data(VOC)$hour)
sample_data(VOC)$fmicrobe <- factor(sample_data(VOC)$microbe)
sample_data(VOC)$fnectar <- factor(sample_data(VOC)$rep)
fit <- lm(sample_sums(VOC)~ sample_data(VOC)$fnectar+ sample_data(VOC)$fday+
+ sample_data(VOC)$fmicrobe)
fit <- lm(sample_sums(VOC)~ sample_data(VOC)$fnectar * sample_data(VOC)$fday * sample_data(VOC)$fmicrobe)
fit <- lm(sample_sums(VOC)~ sample_data(VOC)$nectar.conc+ sample_data(VOC)$fday+
+ sample_data(VOC)$microbe.treatment)
summary(fit)
sample_data(VOC)$fday <- factor(sample_data(VOC)$hour)
sample_data(VOC)$fmicrobe <- factor(sample_data(VOC)$microbe)
sample_data(VOC)$fnectar <- factor(sample_data(VOC)$rep)
fit <- lm(sample_sums(VOC)~ sample_data(VOC)$fnectar+ sample_data(VOC)$fday+
+ sample_data(VOC)$fmicrobe)
summary(fit)
sample_data(VOC)$fday <- factor(sample_data(VOC)$hour)
sample_data(VOC)$fmicrobe <- factor(sample_data(VOC)$microbe)
sample_data(VOC)$fnectar <- factor(sample_data(VOC)$rep)
fit <- lm(sample_sums(VOC)~ sample_data(VOC)$fnectar+ sample_data(VOC)$fday+
+ sample_data(VOC)$fmicrobe)
summary(fit)
# same results
fit <- lm(sample_sums(VOC)~ sample_data(VOC)$fnectar * sample_data(VOC)$fday * sample_data(VOC)$fmicrobe)
summary(fit)
sample_data(VOC)$fday <- factor(sample_data(VOC)$hour)
sample_data(VOC)$fmicrobe <- factor(sample_data(VOC)$microbe)
sample_data(VOC)$fnectar <- factor(sample_data(VOC)$rep)
fit <- lm(sample_sums(VOC)~ sample_data(VOC)$fnectar+ sample_data(VOC)$fday+
+ sample_data(VOC)$fmicrobe)
summary(fit)
# same results
fit <- lm(sample_sums(VOC)~ sample_data(VOC)$fnectar * sample_data(VOC)$fday * sample_data(VOC)$fmicrobe)
summary(fit)
sample_data(VOC)$fday <- factor(sample_data(VOC)$hour)
sample_data(VOC)$fmicrobe <- factor(sample_data(VOC)$microbe)
sample_data(VOC)$fnectar <- factor(sample_data(VOC)$rep)
fit <- lm(sample_sums(VOC)~ sample_data(VOC)$fnectar+ sample_data(VOC)$fday+
+ sample_data(VOC)$fmicrobe)
summary(fit)
# same results
fit <- lm(sample_sums(VOC)~ sample_data(VOC)$fnectar * sample_data(VOC)$fday * sample_data(VOC)$fmicrobe)
summary(fit)
fit <- lm(sample_sums(VOC)~ sample_data(VOC)$rep+ sample_data(VOC)$fday+
+ sample_data(VOC)$microbe)
anova(fit)
TukeyHSD(aov(fit), which="sample_data(VOC)$microbe")
TukeyHSD(aov(fit), which="sample_data(VOC)$rep")
TukeyHSD(aov(fit), which="sample_data(VOC)$fday")
fit <- lm(sample_sums(VOC)~ sample_data(VOC)$rep* sample_data(VOC)$fday
* sample_data(VOC)$microbe)
summary(fit)
aov(fit)
fit <- lm(sample_sums(VOC)~ sample_data(VOC)$rep* sample_data(VOC)$fday
* sample_data(VOC)$microbe)
aov(fit)
TukeyHSD(aov(fit), which="sample_data(VOC)$fday")
TukeyHSD(aov(fit), which="sample_data(VOC)$rep")
TukeyHSD(aov(fit), which="sample_data(VOC)$microbe")
df = as(sample_data(VOC), "data.frame") # coerce to a data frame named df
d = distance(VOC, "bray") # make a dissimilarity matrix named d
names(df)[4] <- c("Microbe")
names(df)[6] <- c("Nectar")
names(df)[8] <- c("Day")
df = as(sample_data(VOC), "data.frame") # coerce to a data frame named df
d = distance(VOC, "bray") # make a dissimilarity matrix named d
df = as(sample_data(VOC), "data.frame") # coerce to a data frame named df
d = phyloseq::distance(VOC, "bray") # make a dissimilarity matrix named d
names(df)[4] <- c("Microbe")
names(df)[6] <- c("Nectar")
names(df)[8] <- c("Day")
library(gdata)
df$Microbe <- reorder.factor(df$Microbe, new.order = c("PA", "FF"))
df$Nectar <- reorder.factor(df$Nectar, new.order = c("Process", "Blank", "Treat"))
df$Day <- reorder.factor(df$Day, new.order = c("2", "24", "48"))
fit = adonis(d ~ Nectar * Day * Microbe, df)
View(abund)
View(meta)
df = as(sample_data(VOC), "data.frame") # coerce to a data frame named df
d = phyloseq::distance(VOC, "bray") # make a dissimilarity matrix named d
names(df)[4] <- c("Microbe")
names(df)[6] <- c("Nectar")
names(df)[8] <- c("Day")
library(gdata)
df$Microbe <- reorder.factor(df$Microbe, new.order = c("B01", "B02", "B03", "P01", "P02", "P03", "R01", "R02", "R03"))
df$Nectar <- reorder.factor(df$Nectar, new.order = c("Process", "Blank", "Treat"))
df$Day <- reorder.factor(df$Day, new.order = c("2", "24", "48"))
fit = adonis(d ~ Nectar * Day * Microbe, df)
df = as(sample_data(VOC), "data.frame") # coerce to a data frame named df
d = phyloseq::distance(VOC, "bray") # make a dissimilarity matrix named d
names(df)[4] <- c("Microbe")
names(df)[6] <- c("Nectar")
names(df)[8] <- c("Day")
library(gdata)
df$Microbe <- reorder.factor(df$Microbe, new.order = c("FF", "PA"))
df$Nectar <- reorder.factor(df$Nectar, new.order = c("B01", "B02", "B03", "P01", "P02", "P03", "R01", "R02", "R03"))
df$Day <- reorder.factor(df$Day, new.order = c("2", "24", "48"))
fit = adonis(d ~ Nectar * Day * Microbe, df)
View(df)
df = as(sample_data(VOC), "data.frame") # coerce to a data frame named df
d = phyloseq::distance(VOC, "bray") # make a dissimilarity matrix named d
names(df)[4] <- c("Microbe")
names(df)[6] <- c("Nectar")
names(df)[8] <- c("Day")
library(gdata)
df$Microbe <- reorder.factor(df$Microbe, new.order = c("FF", "PA"))
df$Nectar <- reorder.factor(df$Nectar, new.order = c("B01", "B02", "B03", "P01", "P02", "P03", "R01", "R02", "R03", "R04"))
df$Day <- reorder.factor(df$Day, new.order = c("2", "24", "48"))
df$Day <- reorder.factor(df$Day, new.order = c("02", "24", "48"))
df$Day <- reorder.factor(df$hour, new.order = c("02", "24", "48"))
df$Day <- reorder.factor(df$fday, new.order = c("02", "24", "48"))
df$Day <- reorder.factor(df$Day, new.order = c("02", "24", "48"))
names(df)[2] <- c("Microbe")
df = as(sample_data(VOC), "data.frame") # coerce to a data frame named df
d = phyloseq::distance(VOC, "bray") # make a dissimilarity matrix named d
names(df)[9] <- c("Microbe")
names(df)[10] <- c("Nectar")
names(df)[11] <- c("Day")
library(gdata)
df$Microbe <- reorder.factor(df$Microbe, new.order = c("FF", "PA"))
df$Nectar <- reorder.factor(df$Nectar, new.order = c("B01", "B02", "B03", "P01", "P02", "P03", "R01", "R02", "R03", "R04"))
df$Day <- reorder.factor(df$Day, new.order = c("2", "24", "48"))
df = as(sample_data(VOC), "data.frame") # coerce to a data frame named df
d = phyloseq::distance(VOC, "bray") # make a dissimilarity matrix named d
names(df)[2] <- c("Microbe")
names(df)[4] <- c("Nectar")
names(df)[6] <- c("Day")
library(gdata)
df$Microbe <- reorder.factor(df$Microbe, new.order = c("FF", "PA"))
df$Nectar <- reorder.factor(df$Nectar, new.order = c("B01", "B02", "B03", "P01", "P02", "P03", "R01", "R02", "R03", "R04"))
df$Day <- reorder.factor(df$Day, new.order = c("2", "24", "48"))
names(df)[5] <- c("Nectar")
df = as(sample_data(VOC), "data.frame") # coerce to a data frame named df
d = phyloseq::distance(VOC, "bray") # make a dissimilarity matrix named d
names(df)[2] <- c("Microbe")
names(df)[5] <- c("Nectar")
names(df)[3] <- c("Day")
library(gdata)
df$Microbe <- reorder.factor(df$Microbe, new.order = c("FF", "PA"))
df$Nectar <- reorder.factor(df$Nectar, new.order = c("B01", "B02", "B03", "P01", "P02", "P03", "R01", "R02", "R03", "R04"))
df$Day <- reorder.factor(df$Day, new.order = c("2", "24", "48"))
fit = adonis(d ~ Nectar * Day * Microbe, df)
#############
# PERMANOVA #
#############
df = as(sample_data(VOC), "data.frame") # coerce to a data frame named df
d = phyloseq::distance(VOC, "bray") # make a dissimilarity matrix named d
names(df)[2] <- c("Microbe")
names(df)[5] <- c("Nectar")
names(df)[4] <- c("Day")
library(gdata)
df$Microbe <- reorder.factor(df$Microbe, new.order = c("FF", "PA"))
df$Nectar <- reorder.factor(df$Nectar, new.order = c("B01", "B02", "B03", "P01", "P02", "P03", "R01", "R02", "R03", "R04"))
df$Day <- reorder.factor(df$Day, new.order = c("2", "24", "48"))
fit = adonis(d ~ Nectar * Day * Microbe, df)
df = as(sample_data(VOC), "data.frame") # coerce to a data frame named df
d = phyloseq::distance(VOC, "bray") # make a dissimilarity matrix named d
names(df)[2] <- c("Microbe")
names(df)[6] <- c("Nectar")
names(df)[4] <- c("Day")
library(gdata)
df$Microbe <- reorder.factor(df$Microbe, new.order = c("FF", "PA"))
df$Nectar <- reorder.factor(df$Nectar, new.order = c("B01", "B02", "B03", "P01", "P02", "P03", "R01", "R02", "R03", "R04"))
df$Day <- reorder.factor(df$Day, new.order = c("2", "24", "48"))
fit = adonis(d ~ Nectar * Day * Microbe, df)
b_test <-betadisper(d, group=df$Microbe, type="median")
b_test
TukeyHSD(b_test)
fit = adonis(d ~ Nectar + Day + Microbe, df)
summary(fit)
fit = adonis(d ~ Nectar + Day + Microbe, df)
summary(fit)
df = as(sample_data(VOC), "data.frame") # coerce to a data frame named df
d = phyloseq::distance(VOC, "jaccard") # make a dissimilarity matrix named d
names(df)[2] <- c("Microbe")
names(df)[6] <- c("Nectar")
names(df)[4] <- c("Day")
library(gdata)
df$Microbe <- reorder.factor(df$Microbe, new.order = c("FF", "PA"))
df$Nectar <- reorder.factor(df$Nectar, new.order = c("B01", "B02", "B03", "P01", "P02", "P03", "R01", "R02", "R03", "R04"))
df$Day <- reorder.factor(df$Day, new.order = c("2", "24", "48"))
fit = adonis(d ~ Nectar * Day * Microbe, df)
b_test <-betadisper(d, group=df$Microbe, type="median")
b_test
TukeyHSD(b_test)
b_test <-betadisper(d, group=df$Nectar, type="median")
b_test
TukeyHSD(b_test)
fit
Mrsonly <- subset_samples(VOC, microbe!="FF")
df = as(sample_data(Mrsonly), "data.frame") # coerce to a data frame named df
d = distance(Mrsonly, "bray") # make a dissimilarity matrix named d
d = phyloseq::distance(Mrsonly, "bray") # make a dissimilarity matrix named d
Mrsonly <- subset_samples(VOC, microbe!="FF")
df = as(sample_data(Mrsonly), "data.frame") # coerce to a data frame named df
d = phyloseq::distance(Mrsonly, "bray") # make a dissimilarity matrix named d
names(df)[2] <- c("Microbe")
names(df)[6] <- c("Nectar")
names(df)[4] <- c("Day")
library(gdata)
df$Microbe <- reorder.factor(df$Microbe, new.order = c("FF", "PA"))
df$Nectar <- reorder.factor(df$Nectar, new.order = c("B01", "B02", "B03", "P01", "P02", "P03", "R01", "R02", "R03", "R04"))
df$Day <- reorder.factor(df$Day, new.order = c("2", "24", "48"))
fit = adonis(d ~ Nectar * Day * Microbe, df)
abund <- round(abund[,-c(1:2)], digits = 0)
OTU <- otu_table(abund, taxa_are_rows=T)
VOC <- phyloseq(OTU, TAX, SAMP)
VOC
plot_richness(VOC, x = "microbe", measures = c("Observed", "Shannon", "Simpson"))
View(VOC)
View(abund)
abund <- round(abund[,-c(1:2)], digits = 0)
OTU <- otu_table(abund, taxa_are_rows=T)
VOC <- phyloseq(OTU, TAX, SAMP)
VOC
plot_richness(VOC, x = "microbe", measures = c("Observed", "Shannon", "Simpson"))
plot_richness(VOC, x = "rep", measures = c("Observed", "Shannon", "Simpson"))
View(abund)
abund <- round(abund[,-c(1:2)], digits = 0)
OTU <- otu_table(abund, taxa_are_rows=T)
View(abund)
library(gdata)
library(devtools)
library(ggplot2)
library(beeswarm)
library(phyloseq) #install via bioconductor
library(vegan)
library(ggbiplot)
library(readxl)
library(readr)
library(ape)
# read in data
meta <- read.csv("~/GitHub/BACandBlue/data/BACandBLUE_SUBSET_FFvsPA_10BB_PROvsREP/meta.csv")
meta$hour=as.factor(meta$hour)
rownames(meta) <- meta$SampleID_merge
SAMP <- sample_data(meta)
sample_names(SAMP)<-meta$SampleID
peaks <- read.csv("~/GitHub/BACandBlue/data/BACandBLUE_SUBSET_FFvsPA_10BB_PROvsREP/peak.csv")
TAX <- tax_table(peaks) # gives a warning, don't freak out
taxa_names(TAX)<-peaks$Peak_ID
colnames(TAX)<- colnames(peaks)
abund <- read.csv("~/GitHub/BACandBlue/data/BACandBLUE_SUBSET_FFvsPA_10BB_PROvsREP/otu_ff_and_pa.csv", colClasses = c("factor","factor", rep("numeric", times= 58)))
# read in peak areas, assigning factors of diff classifications based on columns
rownames(abund) <- abund$Peak_ID #give abund rows names according to "Peak_ID" in peak.csv table
OTU <- otu_table(abund[,-c(1:2)], taxa_are_rows=T) #create a table with only peak areas, compounds are taxa
VOC <- phyloseq(OTU, TAX, SAMP) #IF YOU GET A "SAMPLE_NAMES()" ERROR MAKE SURE YOUR NAMES DO NOT START WITH A NUMBER
#returns: "phyloseq-class experiment-level object
#otu_table()   OTU Table:       [ 110 taxa and 24 samples ] "taxa" = VOCs "samples" = VOC pulls
#sample_data() Sample Data:     [ 24 samples by 8 sample variables ] "sample variable" = VOC jar
#tax_table()   Taxonomy Table:  [ 110 taxa by 2 taxonomic ranks ] "taxonomic rank" = microbe species"
p=plot_bar(VOC, "hour",fill="Peak_ID", facet_grid = ~microbe)
p + geom_point(aes(x=microbe, y=Abundance), color="black", size=3)
###############################
# Analysis and figures
##############################
##############
#    PCoAs   #
##############
###	#PCoA with Bray-Curtis Distances#	###
ord <- ordinate(VOC, method = "PCoA", distance = "bray")
plot_ordination(VOC, ord, color = "hour", shape = "microbe", label = "rep")+
theme_bw() + theme(text = element_text(size = 20)) + geom_point(size = 4)
plot_ordination(VOC, ord, type = "juice", color = "hour", shape = "microbe", label = "rep")+
theme_bw() + theme(text = element_text(size = 20)) + geom_point(size = 4)
PCs <- data.frame(scores(ord$vectors))
new.dat <- cbind(PCs, sample_data(VOC)$microbe, sample_data(VOC)$rep, sample_data(VOC)$hour) # make a new matrix
names(new.dat)[32:34] <- c("microbe","juice","hour") #for the "must be the same length as vector" error make sure that the info inside the bracets matches empty columns in the dataframe your creating"
library(gdata)
new.dat$Microbe <- reorder.factor(new.dat$microbe, new.order = c("FF", "PA"))
new.dat$Hour <- reorder.factor(new.dat$hour, new.order = c("2","24","48"))
summary(new.dat)
ggplot(new.dat, aes(x=Axis.1, y= Axis.2)) +
geom_point(aes(color = Microbe, shape = Hour), position ="jitter") +
facet_grid(~Hour)+
theme_bw()+
xlab("PCoA1 (65.6% Var. Expl.)")+ 	## !don't forget to update these moving forward!
ylab("PCoA2 (21.2% Var. Expl.)")
###	#PCoA with Jaccard distances#	###
ord <- ordinate(VOC, method = "PCoA", distance = "jaccard")
plot_ordination( VOC, ord, color = "hour", shape = "microbe", type = "samples")
# split plot of compounds driving separation and samples in PC1/PC2.
plot_ordination(VOC, ord, type = "samples", color = "hour", shape = "microbe", label = "rep")
###
PCs <- data.frame(scores(ord$vectors))
new.dat <- cbind(PCs, sample_data(VOC)$microbe, sample_data(VOC)$hour, sample_data(VOC)$rep) # make a new matrix
names(new.dat)[38:40] <- c("Microbe", "Hour", "Rep")
library(gdata)
new.dat$Microbe <- reorder.factor(new.dat$Microbe, new.order = c("FF", "PA"))
new.dat$Hour <- reorder.factor(new.dat$Hour, new.order = c("2","24", "48"))
###
ggplot(new.dat, aes(x=Axis.1, y= Axis.2)) +
geom_point(aes(color = Microbe, shape = Hour), position ="jitter") +
facet_grid(~Hour)+
theme_bw()+
xlab("PCoA1 (54.6% Var. Expl.)")+
ylab("PCoA2 (21.5% Var. Expl.)")
ord <- ordinate(VOC, method = "PCoA", distance = "jaccard")
plot_ordination( VOC, ord, color = "hour", shape = "microbe", type = "samples")
# split plot of compounds driving separation and samples in PC1/PC2.
plot_ordination(VOC, ord, type = "samples", color = "hour", shape = "microbe", label = "rep")
###
PCs <- data.frame(scores(ord$vectors))
new.dat <- cbind(PCs, sample_data(VOC)$microbe, sample_data(VOC)$hour, sample_data(VOC)$rep) # make a new matrix
View(new.dat)
###############################
# Analysis and figures
##############################
##############
#    PCoAs   #
##############
###	#PCoA with Bray-Curtis Distances#	###
ord <- ordinate(VOC, method = "PCoA", distance = "bray")
plot_ordination(VOC, ord, color = "hour", shape = "microbe", label = "rep")+
theme_bw() + theme(text = element_text(size = 20)) + geom_point(size = 4)
plot_ordination(VOC, ord, type = "juice", color = "hour", shape = "microbe", label = "rep")+
theme_bw() + theme(text = element_text(size = 20)) + geom_point(size = 4)
PCs <- data.frame(scores(ord$vectors))
new.dat <- cbind(PCs, sample_data(VOC)$microbe, sample_data(VOC)$rep, sample_data(VOC)$hour) # make a new matrix
names(new.dat)[32:34] <- c("microbe","juice","hour") #for the "must be the same length as vector" error make sure that the info inside the bracets matches empty columns in the dataframe your creating"
library(gdata)
new.dat$Microbe <- reorder.factor(new.dat$microbe, new.order = c("FF", "PA"))
new.dat$Hour <- reorder.factor(new.dat$hour, new.order = c("2","24","48"))
summary(new.dat)
ggplot(new.dat, aes(x=Axis.1, y= Axis.2)) +
geom_point(aes(color = Microbe, shape = Hour), position ="jitter") +
facet_grid(~Hour)+
theme_bw()+
xlab("PCoA1 (65.6% Var. Expl.)")+ 	## !don't forget to update these moving forward!
ylab("PCoA2 (21.2% Var. Expl.)")
###	#PCoA with Jaccard distances#	###
ord <- ordinate(VOC, method = "PCoA", distance = "jaccard")
plot_ordination( VOC, ord, color = "hour", shape = "microbe", type = "samples")
# split plot of compounds driving separation and samples in PC1/PC2.
plot_ordination(VOC, ord, type = "samples", color = "hour", shape = "microbe", label = "rep")
###
PCs <- data.frame(scores(ord$vectors))
new.dat <- cbind(PCs, sample_data(VOC)$microbe, sample_data(VOC)$hour, sample_data(VOC)$rep) # make a new matrix
names(new.dat)[39:41] <- c("Microbe", "Hour", "Rep")
library(gdata)
new.dat$Microbe <- reorder.factor(new.dat$Microbe, new.order = c("FF", "PA"))
new.dat$Hour <- reorder.factor(new.dat$Hour, new.order = c("2","24", "48"))
###
ggplot(new.dat, aes(x=Axis.1, y= Axis.2)) +
geom_point(aes(color = Microbe, shape = Hour), position ="jitter") +
facet_grid(~Hour)+
theme_bw()+
xlab("PCoA1 (54.6% Var. Expl.)")+
ylab("PCoA2 (21.5% Var. Expl.)")
abund <- round(abund[,-c(1:2)], digits = 0)
OTU <- otu_table(abund, taxa_are_rows=T)
VOC <- phyloseq(OTU, TAX, SAMP)
VOC
plot_richness(VOC, x = "microbe", measures = c("Observed", "Shannon", "Simpson"))
plot_richness(VOC, x = "rep", measures = c("Observed", "Shannon", "Simpson"))
fit <- lm(estimate_richness(VOC)$Shannon ~ sample_data(VOC)$microbe)
anova(fit)
fit <- lm(estimate_richness(VOC)$Observed ~ sample_data(VOC)$microbe)
fit
fit <- lm(estimate_richness(VOC)$Simpson ~ sample_data(VOC)$microbe)
fit
fit <- lm(estimate_richness(VOC)$Simpson ~ sample_data(VOC)$microbe)
fit
fit <- lm(estimate_richness(VOC)$Shannon ~ sample_data(VOC)$rep)
fit
fit <- lm(estimate_richness(VOC)$Observed ~ sample_data(VOC)$rep)
fit
fit <- lm(estimate_richness(VOC)$Simpson ~ sample_data(VOC)$rep)
fit
NoZero <- subset_samples(VOC, day!="2")
NoZero <- subset_samples(VOC, hour!="2")
plot_richness(NoZero, x = "microbe", measures = c("Observed", "Shannon", "Simpson"))
plot_richness(NoZero, x = "rep", measures = c("Observed", "Shannon", "Simpson"))
fit <- lm(estimate_richness(NoZero)$Shannon ~ sample_data(NoZero)$microbe)
fit
fit <- lm(estimate_richness(NoZero)$Observed ~ sample_data(NoZero)$microbe)
fit
fit <- lm(estimate_richness(NoZero)$Simpson ~ sample_data(NoZero)$microbe)
fit
library("DESeq2")
NoZero <- subset_samples(VOC, hour!="2")
deobj <- phyloseq_to_deseq2(NoZero, ~ rep + microbe)
diagdds = DESeq(deobj, test="Wald", fitType="local")
res = results(diagdds, contrast = c("microbe", "FF", "PA"), cooksCutoff = FALSE)
#NoZero <- subset_samples(VOC, hour!="2")
deobj <- phyloseq_to_deseq2(VOC, ~ rep + microbe)
diagdds = DESeq(deobj, test="Wald", fitType="local")
res = results(diagdds, contrast = c("microbe", "FF", "PA"), cooksCutoff = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyr")
#install.packages("Rmisc")
library(Rmisc)
library(tidyr)
library(readxl)
library(ggplot2)
library(boot)
data = read_excel("~/GitHub/BACandBlue/data/BaCandBLUE_Bioassay/RAW_swd_vs_inoculated_blueberryjuice.xlsx",
sheet = "data4r")
#View(data)
#################################################################################
###Subsetting data to look at the relationship between isolate and SWD behaviors
#################################################################################
data0621=data %>%
dplyr::select(microbe, flies_in_treat, flies_outside, flies_in_control) %>%
dplyr::filter(microbe== "C0621") %>%
tidyr::gather(location, observed, flies_in_treat:flies_in_control)
data0620=data %>%
dplyr::select(microbe, flies_in_treat, flies_outside, flies_in_control) %>%
dplyr::filter(microbe== "C0620") %>%
tidyr::gather(location, observed, flies_in_treat:flies_in_control)
data0633=data %>%
dplyr::select(microbe, flies_in_treat, flies_outside, flies_in_control) %>%
dplyr::filter(microbe== "C0633") %>%
tidyr::gather(location, observed, flies_in_treat:flies_in_control)
data0185=data %>%
dplyr::select(microbe, flies_in_treat, flies_outside, flies_in_control) %>%
dplyr::filter(microbe== "C0185") %>%
tidyr::gather(location, observed, flies_in_treat:flies_in_control)
data0189=data %>%
dplyr::select(microbe, flies_in_treat, flies_outside, flies_in_control) %>%
dplyr::filter(microbe== "C0189") %>%
tidyr::gather(location, observed, flies_in_treat:flies_in_control)
data0634=data %>%
dplyr::select(microbe, flies_in_treat, flies_outside, flies_in_control) %>%
dplyr::filter(microbe== "C0634") %>%
tidyr::gather(location, observed, flies_in_treat:flies_in_control)
###########################################
#### Visualizing all the treatment results
###########################################
ggplot(data, aes(x=microbe, y=flies_in_treat))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")
data1=data %>%
dplyr::select(microbe, flies_in_treat, flies_outside, flies_in_control) %>%
tidyr::gather(location, observed, flies_in_treat:flies_in_control)
ggplot(data1, aes(x=location, y=observed))+geom_boxplot()+facet_wrap(~microbe)+labs(x = "Treatment", y="# of Flies")+scale_x_discrete(labels=c("flies_in_treat"="Treatment", "flies_in_control"="Control", "flies_outside"="No Choice"))
##########################################################################################
#Normality Test and Linear models for the effect of each microbe on the flies in treatment
##########################################################################################
mod=lm(flies_in_treat~microbe,data)
summary(mod)
plot(mod)
mod0621=lm(observed~location,data0621)
summary(mod0621)
plot(mod0621)
mod0620=lm(observed~location,data0620)
summary(mod0620)
plot(mod0620)
mod0633=lm(observed~location,data0633)
summary(mod0633)
plot(mod0633)
mod0185=lm(observed~location,data0185)
summary(mod0185)
plot(mod0185)
mod0189=lm(observed~location,data0189)
summary(mod0189)
plot(mod0189)
mod0634=lm(observed~location,data0634)
summary(mod0634)
plot(mod0634)
##########################################
#Index Plots with 95% confidence itervals
##########################################
data1=data %>%
mutate(data1,escaped=total_flies-(flies_in_treat+flies_in_control+flies_outside)) %>%
dplyr::select(microbe, flies_in_treat, flies_outside, flies_in_control, escaped) %>%
tidyr::gather(location, observed, flies_in_treat:escaped)
# calculate CI
data1=cbind(data1,CI=(CI(data1$observed,ci=0.95))) #CI(x=vector in question, ci=interval to be calculated)
# This creates the plot
ggplot(data=data1,aes(x=location,y=observed),group=microbe) +
ggtitle("Preference Index")+
theme_classic()+
facet_wrap(~microbe)+
#theme(plot.title = element_text(hjust = 0.4),text = element_text(size=20), axis.text.y = element_text(angle=90, hjust=1,color="black"), axis.text.x = element_text(angle=0, hjust=1,color="black"))+
geom_boxplot(fill="grey") +
labs(y="Index",y="Observed")+
ylim(-1.0,1.0)+
stat_summary(fun.data = mean_cl_boot, geom = "errorbar", colour = "Red",width=.1, show.legend=TRUE)+
stat_summary(fun.y = mean, geom = "point", colour = "Red", show.legend=TRUE)+
coord_flip() #Flips the graph on the side
#geom_point(data=Infect_means,aes(x=Infect_means[,], colour = "Mean"),shape=21, size=2) +
#geom_linerange(data=Infect_mean_ci,aes(xmin=mean-ci,xmax=mean+ci,x=mean,color="95% CI")) +
#scale_color_manual(name = "", values = c("red", "red")) +
#guides(shape=guide_legend(label.position = "topleft",override.aes = list()))+
#guides(shape = guide_legend(override.aes = list(size = 5))) +
#scale_color_manual(labels = c(values = c('lightskyblue1', 'lightpink'),'95% CI', 'Mean')) +
#Adds boxplot elements
#Adds title using the variable title
#Centers the title; Adjust the hjust to modify the location
#geom_errorbarh(aes(xmin = lower, xmax = upper), width=0.2)
#coord_flip()+ #Flips the graph on the side
#annotate("text",x=1.35,y=-0.5,label="Mean")+
#annotate("text",x=1.3,y=-0.5,label="Median")+
#annotate("text",x=1.25,y=-0.5,label="95% CI")+
#annotate("pointrange",x=1.35,y=-0.65,ymin = 0.1, ymax = 0.1, colour = "red", size = 0.1)+
#annotate("pointrange",x=1.3,y=-0.65,y=-0.65,ymin = -0.4, ymax = -0.6,
#         colour = "black", size = 0.4,width=0.05)+
#annotate("rect", xmin = 1.3, xmax = 1.3, ymin = -0.6, ymax =-0.7,
#        alpha = .2, colour="black",size=0.8)+
#annotate("errorbar",x=1.25,y=-0.65,ymin = -0.63, ymax = -0.67,
#       colour = "red", size = 0.4,width=0.05)
rm(list=ls())
