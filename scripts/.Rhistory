##############
#    PCoAs   #
##############
###	#PCoA with Bray-Curtis Distances#	###
ord <- ordinate(VOC, method = "PCoA", distance = "bray")
plot_ordination(VOC, ord, color = "hour", shape = "microbe", label = "rep")+
theme_bw() + theme(text = element_text(size = 20)) + geom_point(size = 4)
plot_ordination(VOC, ord, type = "juice", color = "hour", shape = "microbe", label = "rep")+
theme_bw() + theme(text = element_text(size = 20)) + geom_point(size = 4)
PCs <- data.frame(scores(ord$vectors))
new.dat <- cbind(PCs, sample_data(VOC)$microbe, sample_data(VOC)$rep, sample_data(VOC)$hour) # make a new matrix
names(new.dat)[14:16] <- c("microbe","juice","hour") #for the "must be the same length as vector" error make sure that the info inside the bracets matches empty columns in the dataframe your creating"
library(gdata)
new.dat$Microbe <- reorder.factor(new.dat$microbe, new.order = c("FF", "PA"))
new.dat$Hour <- reorder.factor(new.dat$hour, new.order = c("2","24","48"))
summary(new.dat)
ggplot(new.dat, aes(x=Axis.1, y= Axis.2)) +
geom_point(aes(shape = Hour), position ="jitter") +
facet_grid(~Hour)+
theme_bw()+
xlab("PCoA1 (61.5% Var. Expl.)")+ 	## !don't forget to update these moving forward!
ylab("PCoA2 (47.3% Var. Expl.)")
###	#PCoA with Jaccard distances#	###
ord <- ordinate(VOC, method = "PCoA", distance = "jaccard")
plot_ordination( VOC, ord, color = "hour", shape = "microbe", type = "samples")
# split plot of compounds driving separation and samples in PC1/PC2.
plot_ordination(VOC, ord, type = "samples", color = "hour", shape = "microbe", label = "rep")
###
PCs <- data.frame(scores(ord$vectors))
new.dat <- cbind(PCs, sample_data(VOC)$microbe, sample_data(VOC)$hour, sample_data(VOC)$rep) # make a new matrix
names(new.dat)[15:17] <- c("Microbe", "Hour", "Rep")
library(gdata)
new.dat$Microbe <- reorder.factor(new.dat$Microbe, new.order = c("FF", "PA"))
new.dat$Hour <- reorder.factor(new.dat$Hour, new.order = c("2","24", "48"))
###
ggplot(new.dat, aes(x=Axis.1, y= Axis.2)) +
geom_point(aes(shape = Hour), position ="jitter") +
facet_grid(~Hour)+
theme_bw()+
xlab("PCoA1 (52.5% Var. Expl.)")+
ylab("PCoA2 (42.4% Var. Expl.)")
# read in data
meta <- read.csv("~/GitHub/BACandBlue/data/BACandBLUE_GCdata_mix_FFaeni_and_Pagglomerans_10BB_BLANK_PRO_REP/meta.csv")
meta$hour=as.factor(meta$hour)
rownames(meta) <- meta$SampleID_merge
SAMP <- sample_data(meta)
sample_names(SAMP)<-meta$SampleID
peaks <- read.csv("~/GitHub/BACandBlue/data/BACandBLUE_GCdata_mix_FFaeni_and_Pagglomerans_10BB_BLANK_PRO_REP/peak.csv")
TAX <- tax_table(peaks) # gives a warning, don't freak out
taxa_names(TAX)<-peaks$Peak_ID
colnames(TAX)<- colnames(peaks)
abund <- read.csv("~/GitHub/BACandBlue/data/BACandBLUE_GCdata_mix_FFaeni_and_Pagglomerans_10BB_BLANK_PRO_REP/otu2.csv", colClasses = c("factor","factor", rep("numeric", times= 44)))
# read in peak areas, assigning factors of diff classifications based on columns
rownames(abund) <- abund$Peak_ID #give abund rows names according to "Peak_ID" in peak.csv table
OTU <- otu_table(abund[,-c(1:2)], taxa_are_rows=T) #create a table with only peak areas, compounds are taxa
VOC <- phyloseq(OTU, TAX, SAMP) #IF YOU GET A "SAMPLE_NAMES()" ERROR MAKE SURE YOUR NAMES DO NOT START WITH A NUMBER
#returns: "phyloseq-class experiment-level object
#otu_table()   OTU Table:       [ 110 taxa and 24 samples ] "taxa" = VOCs "samples" = VOC pulls
#sample_data() Sample Data:     [ 24 samples by 8 sample variables ] "sample variable" = VOC jar
#tax_table()   Taxonomy Table:  [ 110 taxa by 2 taxonomic ranks ] "taxonomic rank" = microbe species"
p=plot_bar(VOC, "hour",fill="Peak_ID", facet_grid = ~type)
p + geom_point(aes(x=microbe, y=Abundance), color="black", size=3)
###############################
# Analysis and figures
##############################
##############
#    PCoAs   #
##############
###	#PCoA with Bray-Curtis Distances#	###
ord <- ordinate(VOC, method = "PCoA", distance = "bray")
plot_ordination(VOC, ord, color = "hour", shape = "microbe", label = "rep")+
theme_bw() + theme(text = element_text(size = 20)) + geom_point(size = 4)
plot_ordination(VOC, ord, type = "juice", color = "hour", shape = "microbe", label = "rep")+
theme_bw() + theme(text = element_text(size = 20)) + geom_point(size = 4)
PCs <- data.frame(scores(ord$vectors))
new.dat <- cbind(PCs, sample_data(VOC)$microbe, sample_data(VOC)$rep, sample_data(VOC)$hour) # make a new matrix
names(new.dat)[15:17] <- c("microbe","juice","hour") #for the "must be the same length as vector" error make sure that the info inside the bracets matches empty columns in the dataframe your creating"
# read in data
meta <- read.csv("~/GitHub/BACandBlue/data/BACandBLUE_GCdata_mix_FFaeni_and_Pagglomerans_10BB_BLANK_PRO_REP/meta.csv")
meta$hour=as.factor(meta$hour)
rownames(meta) <- meta$SampleID_merge
SAMP <- sample_data(meta)
sample_names(SAMP)<-meta$SampleID
peaks <- read.csv("~/GitHub/BACandBlue/data/BACandBLUE_GCdata_mix_FFaeni_and_Pagglomerans_10BB_BLANK_PRO_REP/peak.csv")
TAX <- tax_table(peaks) # gives a warning, don't freak out
taxa_names(TAX)<-peaks$Peak_ID
colnames(TAX)<- colnames(peaks)
abund <- read.csv("~/GitHub/BACandBlue/data/BACandBLUE_GCdata_mix_FFaeni_and_Pagglomerans_10BB_BLANK_PRO_REP/otu2.csv", colClasses = c("factor","factor", rep("numeric", times= 44)))
# read in peak areas, assigning factors of diff classifications based on columns
rownames(abund) <- abund$Peak_ID #give abund rows names according to "Peak_ID" in peak.csv table
OTU <- otu_table(abund[,-c(1:2)], taxa_are_rows=T) #create a table with only peak areas, compounds are taxa
VOC <- phyloseq(OTU, TAX, SAMP) #IF YOU GET A "SAMPLE_NAMES()" ERROR MAKE SURE YOUR NAMES DO NOT START WITH A NUMBER
#returns: "phyloseq-class experiment-level object
#otu_table()   OTU Table:       [ 110 taxa and 24 samples ] "taxa" = VOCs "samples" = VOC pulls
#sample_data() Sample Data:     [ 24 samples by 8 sample variables ] "sample variable" = VOC jar
#tax_table()   Taxonomy Table:  [ 110 taxa by 2 taxonomic ranks ] "taxonomic rank" = microbe species"
p=plot_bar(VOC, "hour",fill="Peak_ID", facet_grid = ~type)
p + geom_point(aes(x=microbe, y=Abundance), color="black", size=3)
###############################
# Analysis and figures
##############################
##############
#    PCoAs   #
##############
###	#PCoA with Bray-Curtis Distances#	###
ord <- ordinate(VOC, method = "PCoA", distance = "bray")
plot_ordination(VOC, ord, color = "hour", shape = "microbe", label = "rep")+
theme_bw() + theme(text = element_text(size = 20)) + geom_point(size = 4)
plot_ordination(VOC, ord, type = "juice", color = "hour", shape = "microbe", label = "rep")+
theme_bw() + theme(text = element_text(size = 20)) + geom_point(size = 4)
PCs <- data.frame(scores(ord$vectors))
new.dat <- cbind(PCs, sample_data(VOC)$microbe, sample_data(VOC)$rep, sample_data(VOC)$hour) # make a new matrix
names(new.dat)[13:15] <- c("microbe","juice","hour") #for the "must be the same length as vector" error make sure that the info inside the bracets matches empty columns in the dataframe your creating"
View(new.dat)
# read in data
meta <- read.csv("~/GitHub/BACandBlue/data/BACandBLUE_GCdata_mix_FFaeni_and_Pagglomerans_10BB_BLANK_PRO_REP/meta.csv")
meta$hour=as.factor(meta$hour)
rownames(meta) <- meta$SampleID_merge
SAMP <- sample_data(meta)
sample_names(SAMP)<-meta$SampleID
peaks <- read.csv("~/GitHub/BACandBlue/data/BACandBLUE_GCdata_mix_FFaeni_and_Pagglomerans_10BB_BLANK_PRO_REP/peak.csv")
TAX <- tax_table(peaks) # gives a warning, don't freak out
taxa_names(TAX)<-peaks$Peak_ID
colnames(TAX)<- colnames(peaks)
abund <- read.csv("~/GitHub/BACandBlue/data/BACandBLUE_GCdata_mix_FFaeni_and_Pagglomerans_10BB_BLANK_PRO_REP/otu2.csv", colClasses = c("factor","factor", rep("numeric", times= 44)))
# read in peak areas, assigning factors of diff classifications based on columns
rownames(abund) <- abund$Peak_ID #give abund rows names according to "Peak_ID" in peak.csv table
OTU <- otu_table(abund[,-c(1:2)], taxa_are_rows=T) #create a table with only peak areas, compounds are taxa
VOC <- phyloseq(OTU, TAX, SAMP) #IF YOU GET A "SAMPLE_NAMES()" ERROR MAKE SURE YOUR NAMES DO NOT START WITH A NUMBER
#returns: "phyloseq-class experiment-level object
#otu_table()   OTU Table:       [ 110 taxa and 24 samples ] "taxa" = VOCs "samples" = VOC pulls
#sample_data() Sample Data:     [ 24 samples by 8 sample variables ] "sample variable" = VOC jar
#tax_table()   Taxonomy Table:  [ 110 taxa by 2 taxonomic ranks ] "taxonomic rank" = microbe species"
p=plot_bar(VOC, "hour",fill="Peak_ID", facet_grid = ~type)
p + geom_point(aes(x=microbe, y=Abundance), color="black", size=3)
###############################
# Analysis and figures
##############################
##############
#    PCoAs   #
##############
###	#PCoA with Bray-Curtis Distances#	###
ord <- ordinate(VOC, method = "PCoA", distance = "bray")
plot_ordination(VOC, ord, color = "hour", shape = "microbe", label = "rep")+
theme_bw() + theme(text = element_text(size = 20)) + geom_point(size = 4)
plot_ordination(VOC, ord, type = "juice", color = "hour", shape = "microbe", label = "rep")+
theme_bw() + theme(text = element_text(size = 20)) + geom_point(size = 4)
PCs <- data.frame(scores(ord$vectors))
new.dat <- cbind(PCs, sample_data(VOC)$microbe, sample_data(VOC)$rep, sample_data(VOC)$hour) # make a new matrix
names(new.dat)[9:11] <- c("microbe","juice","hour") #for the "must be the same length as vector" error make sure that the info inside the bracets matches empty columns in the dataframe your creating"
library(gdata)
new.dat$Microbe <- reorder.factor(new.dat$microbe, new.order = c("FF", "PA"))
new.dat$Hour <- reorder.factor(new.dat$hour, new.order = c("2","24","48"))
summary(new.dat)
ggplot(new.dat, aes(x=Axis.1, y= Axis.2)) +
geom_point(aes(shape = Hour), position ="jitter") +
facet_grid(~Hour)+
theme_bw()+
xlab("PCoA1 (61.5% Var. Expl.)")+ 	## !don't forget to update these moving forward!
ylab("PCoA2 (47.3% Var. Expl.)")
###	#PCoA with Jaccard distances#	###
ord <- ordinate(VOC, method = "PCoA", distance = "jaccard")
plot_ordination( VOC, ord, color = "hour", shape = "microbe", type = "samples")
# split plot of compounds driving separation and samples in PC1/PC2.
plot_ordination(VOC, ord, type = "samples", color = "hour", shape = "microbe", label = "rep")
###
PCs <- data.frame(scores(ord$vectors))
new.dat <- cbind(PCs, sample_data(VOC)$microbe, sample_data(VOC)$hour, sample_data(VOC)$rep) # make a new matrix
names(new.dat)[16:18] <- c("Microbe", "Hour", "Rep")
# read in data
meta <- read.csv("~/GitHub/BACandBlue/data/BACandBLUE_GCdata_mix_FFaeni_and_Pagglomerans_10BB_BLANK_PRO_REP/meta.csv")
meta$hour=as.factor(meta$hour)
rownames(meta) <- meta$SampleID_merge
SAMP <- sample_data(meta)
sample_names(SAMP)<-meta$SampleID
peaks <- read.csv("~/GitHub/BACandBlue/data/BACandBLUE_GCdata_mix_FFaeni_and_Pagglomerans_10BB_BLANK_PRO_REP/peak.csv")
TAX <- tax_table(peaks) # gives a warning, don't freak out
taxa_names(TAX)<-peaks$Peak_ID
colnames(TAX)<- colnames(peaks)
abund <- read.csv("~/GitHub/BACandBlue/data/BACandBLUE_GCdata_mix_FFaeni_and_Pagglomerans_10BB_BLANK_PRO_REP/otu2.csv", colClasses = c("factor","factor", rep("numeric", times= 44)))
# read in peak areas, assigning factors of diff classifications based on columns
rownames(abund) <- abund$Peak_ID #give abund rows names according to "Peak_ID" in peak.csv table
OTU <- otu_table(abund[,-c(1:2)], taxa_are_rows=T) #create a table with only peak areas, compounds are taxa
VOC <- phyloseq(OTU, TAX, SAMP) #IF YOU GET A "SAMPLE_NAMES()" ERROR MAKE SURE YOUR NAMES DO NOT START WITH A NUMBER
#returns: "phyloseq-class experiment-level object
#otu_table()   OTU Table:       [ 110 taxa and 24 samples ] "taxa" = VOCs "samples" = VOC pulls
#sample_data() Sample Data:     [ 24 samples by 8 sample variables ] "sample variable" = VOC jar
#tax_table()   Taxonomy Table:  [ 110 taxa by 2 taxonomic ranks ] "taxonomic rank" = microbe species"
p=plot_bar(VOC, "hour",fill="Peak_ID", facet_grid = ~type)
p + geom_point(aes(x=microbe, y=Abundance), color="black", size=3)
###############################
# Analysis and figures
##############################
##############
#    PCoAs   #
##############
###	#PCoA with Bray-Curtis Distances#	###
ord <- ordinate(VOC, method = "PCoA", distance = "bray")
plot_ordination(VOC, ord, color = "hour", shape = "microbe", label = "rep")+
theme_bw() + theme(text = element_text(size = 20)) + geom_point(size = 4)
plot_ordination(VOC, ord, type = "juice", color = "hour", shape = "microbe", label = "rep")+
theme_bw() + theme(text = element_text(size = 20)) + geom_point(size = 4)
PCs <- data.frame(scores(ord$vectors))
new.dat <- cbind(PCs, sample_data(VOC)$microbe, sample_data(VOC)$rep, sample_data(VOC)$hour) # make a new matrix
names(new.dat)[9:11] <- c("microbe","juice","hour") #for the "must be the same length as vector" error make sure that the info inside the bracets matches empty columns in the dataframe your creating"
library(gdata)
new.dat$Microbe <- reorder.factor(new.dat$microbe, new.order = c("FF", "PA"))
new.dat$Hour <- reorder.factor(new.dat$hour, new.order = c("2","24","48"))
summary(new.dat)
ggplot(new.dat, aes(x=Axis.1, y= Axis.2)) +
geom_point(aes(shape = Hour), position ="jitter") +
facet_grid(~Hour)+
theme_bw()+
xlab("PCoA1 (61.5% Var. Expl.)")+ 	## !don't forget to update these moving forward!
ylab("PCoA2 (47.3% Var. Expl.)")
###	#PCoA with Jaccard distances#	###
ord <- ordinate(VOC, method = "PCoA", distance = "jaccard")
plot_ordination( VOC, ord, color = "hour", shape = "microbe", type = "samples")
# split plot of compounds driving separation and samples in PC1/PC2.
plot_ordination(VOC, ord, type = "samples", color = "hour", shape = "microbe", label = "rep")
###
PCs <- data.frame(scores(ord$vectors))
new.dat <- cbind(PCs, sample_data(VOC)$microbe, sample_data(VOC)$hour, sample_data(VOC)$rep) # make a new matrix
names(new.dat)[9:11] <- c("Microbe", "Hour", "Rep")
library(gdata)
new.dat$Microbe <- reorder.factor(new.dat$Microbe, new.order = c("FF", "PA"))
new.dat$Hour <- reorder.factor(new.dat$Hour, new.order = c("2","24", "48"))
###
ggplot(new.dat, aes(x=Axis.1, y= Axis.2)) +
geom_point(aes(shape = Hour), position ="jitter") +
facet_grid(~Hour)+
theme_bw()+
xlab("PCoA1 (52.5% Var. Expl.)")+
ylab("PCoA2 (42.4% Var. Expl.)")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyr")
#install.packages("Rmisc")
library(Rmisc)
library(tidyr)
library(readxl)
library(ggplot2)
library(boot)
data = read_excel("~/GitHub/BACandBlue/data/BaCandBLUE_Bioassay/SWD_ChoiceAssay_USDA.xlsx", sheet="replicates")
#View(data)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch, flies_outside, trap2_catch,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633" & trap2_microbe== "C0621") %>%
tidyr::gather(location, observed, trap1_catch:legs_up)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyr")
#install.packages("Rmisc")
library(Rmisc)
library(tidyr)
library(readxl)
library(ggplot2)
library(boot)
data = read_excel("~/GitHub/BACandBlue/data/BaCandBLUE_Bioassay/SWD_ChoiceAssay_USDA.xlsx", sheet="replicates")
#View(data)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch, flies_outside, trap2_catch,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633" & trap2_microbe== "C0621") %>%
tidyr::gather(location, observed, trap1_catch:legs_up)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyr")
#install.packages("Rmisc")
library(Rmisc)
library(tidyr)
library(readxl)
library(ggplot2)
library(boot)
data = read_excel("~/GitHub/BACandBlue/data/BaCandBLUE_Bioassay/SWD_ChoiceAssay_USDA.xlsx", sheet="replicates")
#View(data)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H_24H, flies_outside, trap2_catch_24H_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633" & trap2_microbe== "C0621") %>%
tidyr::gather(location, observed, trap1_catch_24H_24H:legs_up)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633" & trap2_microbe== "C0621") %>%
tidyr::gather(location, observed, trap1_catch_24H_24H:legs_up)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633" & trap2_microbe== "C0621") %>%
tidyr::gather(location, observed, trap1_catch_24H:legs_up)
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("flies_outside", "legs_up", "trap1_catch_24H_24H", "trap2_catch_24H"),
labels=c("No Choice", "Dead", "P. agglomerans", "F. faeni"))
data0633and0621_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633+C0621" & trap2_microbe== "C0621") %>%
tidyr::gather(location, observed, trap1_catch_24H_24H:legs_up)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633" & trap2_microbe== "C0621") %>%
tidyr::gather(location, observed, trap1_catch_24H:legs_up)
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("flies_outside", "legs_up", "trap2_catch_24H", "trap2_catch_24H"),
labels=c("No Choice", "Dead", "P. agglomerans", "F. faeni"))
data0633and0621_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap2_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633+C0621" & trap2_microbe== "C0621") %>%
tidyr::gather(location, observed, trap2_catch_24H:legs_up)
ggplot(data0633and0621_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("flies_outside", "legs_up", "trap2_catch_24H", "trap2_catch_24H"),
labels=c("No Choice", "Dead", "P. agglomerans and F. Faeni", "F. faeni"))
data0633and0621_0633=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap2_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633+C0621" & trap2_microbe== "C0633") %>%
tidyr::gather(location, observed, trap2_catch_24H:legs_up)
ggplot(data0633and0621_0633, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("flies_outside", "legs_up", "trap2_catch_24H", "trap2_catch_24H"),
labels=c("No Choice", "Dead", "P. agglomerans and F. Faeni", "P. agglomerans"))
data0620=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap2_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0620") %>%
tidyr::gather(location, observed, trap2_catch_24H:legs_up)
data0185=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap2_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0185") %>%
tidyr::gather(location, observed, trap2_catch_24H:legs_up)
data0189=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap2_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0189") %>%
tidyr::gather(location, observed, trap2_catch_24H:legs_up)
data0634=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap2_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0634") %>%
tidyr::gather(location, observed, trap2_catch_24H:legs_up)
###########################################
#### Visualizing all the treatment results#
###########################################
labels <- c(C0620="Pseudomonas psychotrans (R)",C0621="Frigoribacterium faeni (R)",C0633="Pantoe agglomerans (A)",C0185="Bacillus subtillis (A)",C0189="Bacillus siamensis (R)",C0634="Enterobacteriaceae spp. (R)")
data1=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap2_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
tidyr::gather(location, observed, trap2_catch_24H:legs_up)
ggplot(data1, aes(x=location, y=observed))+geom_boxplot()+
facet_wrap(start_date~trap1_microbe, labeller=labeller(trap1_microbe=labels))+
labs(x = "Treatment", y="# of Flies")+
scale_x_discrete(labels=c("flies_in_treat"="Treatment", "flies_in_control"="Control", "flies_outside"="No Choice"))
##########################################################################################
#Normality Test and Linear models for the effect of each microbe on the flies in treatment
##########################################################################################
mod=lm(trap1_catch_24H~trap1_microbe,data)
summary(mod)
plot(mod)
mod0621=lm(observed~location,data0621)
summary(mod0621)
plot(mod0621)
mod0620=lm(observed~location,data0620)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633" & trap2_microbe== "C0621") %>%
tidyr::gather(location, observed, trap1_catch_24H:legs_up)
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("flies_outside", "legs_up", "trap2_catch_24H", "trap2_catch_24H"),
labels=c("No Choice", "Dead", "P. agglomerans", "F. faeni"))
data0633and0621_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap2_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633+C0621" & trap2_microbe== "C0621") %>%
tidyr::gather(location, observed, trap2_catch_24H:legs_up)
ggplot(data0633and0621_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("flies_outside", "legs_up", "trap2_catch_24H", "trap2_catch_24H"),
labels=c("No Choice", "Dead", "P. agglomerans and F. Faeni", "F. faeni"))
data0633and0621_0633=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap2_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633+C0621" & trap2_microbe== "C0633") %>%
tidyr::gather(location, observed, trap2_catch_24H:legs_up)
ggplot(data0633and0621_0633, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("flies_outside", "legs_up", "trap2_catch_24H", "trap2_catch_24H"),
labels=c("No Choice", "Dead", "P. agglomerans and F. Faeni", "P. agglomerans"))
data0620=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap2_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0620") %>%
tidyr::gather(location, observed, trap2_catch_24H:legs_up)
data0185=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap2_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0185") %>%
tidyr::gather(location, observed, trap2_catch_24H:legs_up)
data0189=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap2_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0189") %>%
tidyr::gather(location, observed, trap2_catch_24H:legs_up)
data0634=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap2_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0634") %>%
tidyr::gather(location, observed, trap2_catch_24H:legs_up)
###########################################
#### Visualizing all the treatment results#
###########################################
labels <- c(C0620="Pseudomonas psychotrans (R)",C0621="Frigoribacterium faeni (R)",C0633="Pantoe agglomerans (A)",C0185="Bacillus subtillis (A)",C0189="Bacillus siamensis (R)",C0634="Enterobacteriaceae spp. (R)")
data1=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap2_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
tidyr::gather(location, observed, trap2_catch_24H:legs_up)
ggplot(data1, aes(x=location, y=observed))+geom_boxplot()+
facet_wrap(start_date~trap1_microbe, labeller=labeller(trap1_microbe=labels))+
labs(x = "Treatment", y="# of Flies")+
scale_x_discrete(labels=c("flies_in_treat"="Treatment", "flies_in_control"="Control", "flies_outside"="No Choice"))
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633" & trap2_microbe== "C0621") %>%
tidyr::gather(location, observed, trap1_catch_24H:legs_up)
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("flies_outside", "legs_up", "trap2_catch_24H", "trap2_catch_24H"),
labels=c("No Choice", "Dead", "P. agglomerans", "F. faeni"))
View(data0633_0621)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633" & trap2_microbe== "C0621")
data0633_0621=data
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H,legs_up)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H,legs_up)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633") %>%
dplyr::filter(trap2_microbe== "C0621") %>%
tidyr::gather(location, observed, trap1_catch_24H:legs_up)
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("flies_outside", "legs_up", "trap2_catch_24H", "trap2_catch_24H"),
labels=c("No Choice", "Dead", "P. agglomerans", "F. faeni"))
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633") %>%
dplyr::filter(trap2_microbe== "C0621")
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H,legs_up)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633")
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
dplyr::filter(trap1_microbe== "C0633") %>%
dplyr::filter(trap2_microbe== "C0621")
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
tidyr::gather(location, observed, trap1_catch_24H:legs_up)
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("flies_outside", "legs_up", "trap2_catch_24H", "trap2_catch_24H"),
labels=c("No Choice", "Dead", "P. agglomerans", "F. faeni"))
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H,legs_up) %>%
tidyr::gather(location, observed, trap1_catch_24H:legs_up)
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("flies_outside", "legs_up", "trap2_catch_24H", "trap2_catch_24H"),
labels=c("No Choice", "Dead", "P. agglomerans", "F. faeni"))
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H) %>%
tidyr::gather(location, observed, trap1_catch_24H:flies_outside)
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("flies_outside", "legs_up", "trap2_catch_24H", "trap2_catch_24H"),
labels=c("No Choice", "Dead", "P. agglomerans", "F. faeni"))
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H) %>%
tidyr::gather(location, observed, trap1_catch_24H:flies_outside)
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("flies_outside", "trap2_catch_24H", "trap2_catch_24H"),
labels=c("No Choice", "P. agglomerans", "F. faeni"))
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H) %>%
tidyr::gather(location, observed, trap1_catch_24H:flies_outside)
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("flies_outside", "trap1_catch_24H", "trap1_catch_24H"),
labels=c("No Choice", "P. agglomerans", "F. faeni"))
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("flies_outside", "trap1_catch_24H", "trap1_catch_24H"),
labels=c("No Choice", "P. agglomerans", "F. faeni"))+
facet_wrap(~trap1_microbe)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H) %>%
tidyr::gather(location, observed, trap1_catch_24H:flies_outside)
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("flies_outside", "trap1_catch_24H", "trap2_catch_24H"),
labels=c("No Choice", "P. agglomerans", "Control"))+
facet_wrap(~trap1_microbe)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H) %>%
tidyr::gather(location, observed, trap1_catch_24H:flies_outside)
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("trap1_catch_24H", "trap2_catch_24H"),
labels=c("P. agglomerans", "Control"))+
facet_wrap(~trap1_microbe)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H) %>%
tidyr::gather(location, observed, trap1_catch_24H:flies_outside)
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Microbe ID", y="# of Flies")+
scale_x_discrete(breaks=c("trap1_catch_24H", "trap2_catch_24H"),
labels=c("Microbe", "Control"))+
facet_wrap(~trap1_microbe)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, trap2_catch_24H) %>%
tidyr::gather(location, observed, trap1_catch_24H:flies_outside)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H) %>%
tidyr::gather(location, observed, trap1_catch_24H:flies_outside)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, flies_outside, trap2_catch_24H) %>%
tidyr::gather(location, observed, trap1_catch_24H:flies_outside)
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Treatment", y="# of Flies")+
scale_x_discrete(breaks=c("trap1_catch_24H", "trap2_catch_24H"),
labels=c("Microbe", "Control"))+
facet_wrap(~trap1_microbe)
data0633_0621=data %>%
dplyr::select(start_date,trap1_microbe, trap2_microbe, trap1_catch_24H, trap2_catch_24H, flies_outside) %>%
tidyr::gather(location, observed, trap1_catch_24H:flies_outside)
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Treatment", y="# of Flies")+
scale_x_discrete(breaks=c("trap1_catch_24H", "trap2_catch_24H"),
labels=c("Microbe", "Control"))+
facet_wrap(~trap1_microbe)
ggplot(data0633_0621, aes(x=location, y=observed))+geom_boxplot()+labs(x = "Treatment", y="# of Flies")+
scale_x_discrete(breaks=c("trap1_catch_24H", "trap2_catch_24H"),
labels=c("Microbe", "Control"))+
facet_wrap(start_date~trap1_microbe)
